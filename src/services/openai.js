// Servicio de OpenAI para generaci√≥n de contenido personalizado
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

/**
 * Genera contenido personalizado usando OpenAI basado en el perfil del usuario
 * @param {Object} profile - Perfil del usuario con personalidad analizada
 * @param {Object} pillar - Pilar de contenido espec√≠fico
 * @param {Date} scheduledDate - Fecha programada para el contenido
 * @returns {Promise<Object>} Contenido generado
 */
export const generateContent = async (profile, pillar, scheduledDate) => {
  try {
    const prompt = buildContentPrompt(profile, pillar, scheduledDate);
    
    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: 'Eres un experto en marketing de contenidos y generaci√≥n de posts para redes sociales. Generas contenido personalizado basado en el perfil de personalidad del usuario.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 500,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const generatedContent = data.choices[0].message.content;
    
    return parseGeneratedContent(generatedContent, profile, pillar, scheduledDate);
  } catch (error) {
    console.error('Error generating content:', error);
    // Fallback a contenido mock si falla la API
    return generateFallbackContent(profile, pillar, scheduledDate);
  }
};

/**
 * Construye el prompt para OpenAI basado en el perfil del usuario
 */
const buildContentPrompt = (profile, pillar, scheduledDate) => {
  const { personalityType, tone, interests, contentStrategy } = profile;
  const dayOfWeek = scheduledDate.toLocaleDateString('es-ES', { weekday: 'long' });
  const month = scheduledDate.toLocaleDateString('es-ES', { month: 'long' });
  
  return `
Genera un post para Twitter basado en el siguiente perfil de usuario:

**Perfil de Personalidad:**
- Tipo: ${personalityType}
- Tono: ${tone}
- Intereses: ${interests.join(', ')}
- Estrategia: ${contentStrategy.focus}

**Pilar de Contenido:**
- Nombre: ${pillar.name}
- Descripci√≥n: ${pillar.description}

**Contexto:**
- Fecha: ${dayOfWeek}, ${month}
- Plataforma: Twitter
- Formato: Hilo de Twitter (m√°ximo 4 tweets)

**Requisitos:**
1. El contenido debe ser aut√©ntico y personal
2. Usar el tono especificado: ${tone}
3. Incluir datos, estad√≠sticas o insights cuando sea apropiado
4. Terminar con una pregunta que invite a la interacci√≥n
5. Usar hashtags relevantes (m√°ximo 3)
6. Mantener un enfoque en: ${contentStrategy.focus}

**Formato de respuesta:**
{
  "title": "T√≠tulo del post",
  "body_md": "Contenido en formato Markdown",
  "summary": "Resumen del contenido",
  "keywords": "palabras clave separadas por comas",
  "hashtags": ["#hashtag1", "#hashtag2", "#hashtag3"]
}

Genera contenido que sea valioso, aut√©ntico y que refleje la personalidad ${personalityType} del usuario.
`;
};

/**
 * Parsea el contenido generado por OpenAI
 */
const parseGeneratedContent = (generatedContent, profile, pillar, scheduledDate) => {
  try {
    // Intentar parsear como JSON
    const content = JSON.parse(generatedContent);
    
    return {
      title: content.title || `Post sobre ${pillar.name}`,
      body_md: content.body_md || generatedContent,
      summary: content.summary || `Contenido sobre ${pillar.name}`,
      keywords: content.keywords || pillar.name.toLowerCase(),
      hashtags: content.hashtags || [`#${pillar.name.toLowerCase().replace(/\s+/g, '')}`],
      status: 'draft',
      scheduled_at: scheduledDate.toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
  } catch (error) {
    // Si no es JSON v√°lido, usar el contenido tal como viene
    return {
      title: `Post sobre ${pillar.name}`,
      body_md: generatedContent,
      summary: `Contenido generado sobre ${pillar.name}`,
      keywords: pillar.name.toLowerCase(),
      hashtags: [`#${pillar.name.toLowerCase().replace(/\s+/g, '')}`],
      status: 'draft',
      scheduled_at: scheduledDate.toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
  }
};

/**
 * Genera contenido de fallback si falla la API de OpenAI
 */
const generateFallbackContent = (profile, pillar, scheduledDate) => {
  const { personalityType, interests } = profile;
  const templates = getFallbackTemplates(personalityType);
  const template = templates[Math.floor(Math.random() * templates.length)];
  const topic = interests[Math.floor(Math.random() * interests.length)];
  
  const content = template.replace('{topic}', topic).replace('{pillar}', pillar.name);
  
  return {
    title: `Post sobre ${pillar.name}`,
    body_md: content,
    summary: `Contenido sobre ${pillar.name}`,
    keywords: `${pillar.name.toLowerCase()}, ${topic}`,
    hashtags: [`#${pillar.name.toLowerCase().replace(/\s+/g, '')}`, `#${topic.replace(/\s+/g, '')}`],
    status: 'draft',
    scheduled_at: scheduledDate.toISOString(),
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
};

/**
 * Plantillas de fallback por tipo de personalidad
 */
const getFallbackTemplates = (personalityType) => {
  const templates = {
    'analytical': [
      "Los datos sobre {topic} que m√°s me sorprendieron:\n\n1. [Dato 1]\n2. [Dato 2]\n3. [Dato 3]\n\n¬øCu√°l te parece m√°s interesante?",
      "An√°lisis de {topic}: lo que aprend√≠ despu√©s de estudiar [X] casos\n\n[Insight principal]\n\n¬øHas observado esto tambi√©n?",
      "Mi framework para analizar {topic}:\n\nüìä [Paso 1]\nüìà [Paso 2]\nüìã [Paso 3]\n\n¬øQu√© agregar√≠as?",
      "El error m√°s com√∫n en {topic} seg√∫n los datos:\n\n‚ùå [Error com√∫n]\n‚úÖ [Soluci√≥n]\n\n¬øHas cometido este error?"
    ],
    'entrepreneurial': [
      "La lecci√≥n m√°s importante que aprend√≠ sobre {topic}:\n\n[Lecci√≥n principal]\n\n¬øCu√°l ha sido tu experiencia?",
      "3 estrategias de {topic} que funcionan:\n\n1. [Estrategia 1]\n2. [Estrategia 2]\n3. [Estrategia 3]\n\n¬øCu√°l probar√≠as?",
      "Mi experiencia con {topic} en startups:\n\n[Experiencia personal]\n\n¬øQu√© has aprendido t√∫?",
      "El framework que uso para {topic}:\n\n[Framework]\n\n¬øC√≥mo lo har√≠as t√∫?"
    ],
    'creative': [
      "Mi proceso creativo para {topic}:\n\nüé® [Paso 1]\nüí° [Paso 2]\n‚ú® [Paso 3]\n\n¬øCu√°l es tu proceso?",
      "La inspiraci√≥n detr√°s de {topic}:\n\n[Fuente de inspiraci√≥n]\n\n¬øQu√© te inspira?",
      "3 formas creativas de abordar {topic}:\n\n1. [Enfoque 1]\n2. [Enfoque 2]\n3. [Enfoque 3]\n\n¬øCu√°l te gusta m√°s?",
      "El lado creativo de {topic}:\n\n[Perspectiva creativa]\n\n¬øC√≥mo lo ves t√∫?"
    ],
    'practical': [
      "C√≥mo hacer {topic} paso a paso:\n\n1. [Paso 1]\n2. [Paso 2]\n3. [Paso 3]\n\n¬øTe funciona?",
      "La herramienta que revolucion√≥ mi {topic}:\n\n[Herramienta]\n\n¬øCu√°l usas t√∫?",
      "3 tips pr√°cticos para {topic}:\n\nüí° [Tip 1]\nüîß [Tip 2]\n‚ö° [Tip 3]\n\n¬øCu√°l agregar√≠as?",
      "Mi soluci√≥n para {topic}:\n\n[Soluci√≥n]\n\n¬øC√≥mo lo resuelves t√∫?"
    ],
    'social': [
      "La conversaci√≥n que cambi√≥ mi perspectiva sobre {topic}:\n\n[Conversaci√≥n]\n\n¬øQu√© conversaci√≥n te marc√≥?",
      "Lo que aprend√≠ de la comunidad sobre {topic}:\n\n[Aprendizaje]\n\n¬øQu√© has aprendido t√∫?",
      "Mi experiencia colaborando en {topic}:\n\n[Experiencia]\n\n¬øHas colaborado en algo similar?",
      "El poder de la comunidad en {topic}:\n\n[Reflexi√≥n]\n\n¬øQu√© opinas?"
    ],
    'organized': [
      "Mi sistema para {topic}:\n\nüìã [Sistema]\n\n¬øC√≥mo lo organizas t√∫?",
      "El framework que uso para {topic}:\n\n[Framework]\n\n¬øQu√© framework usas?",
      "3 pasos para organizar {topic}:\n\n1. [Paso 1]\n2. [Paso 2]\n3. [Paso 3]\n\n¬øTe funciona?",
      "La metodolog√≠a que revolucion√≥ mi {topic}:\n\n[Metodolog√≠a]\n\n¬øCu√°l usas t√∫?"
    ]
  };

  return templates[personalityType] || templates['analytical'];
};

/**
 * Genera m√∫ltiples posts para un calendario
 */
export const generateCalendarContent = async (profile, pillars, days = 30) => {
  const content = [];
  const startDate = new Date();
  
  for (let i = 0; i < days; i++) {
    const scheduledDate = new Date(startDate);
    scheduledDate.setDate(startDate.getDate() + i);
    
    // Seleccionar pilar aleatorio
    const pillar = pillars[Math.floor(Math.random() * pillars.length)];
    
    try {
      const post = await generateContent(profile, pillar, scheduledDate);
      content.push({
        id: `generated-${Date.now()}-${i}`,
        user_id: profile.user_id,
        profile_id: profile.id,
        type: 'tweet',
        channel: 'Twitter',
        pillar_id: pillar.id,
        ...post
      });
    } catch (error) {
      console.error(`Error generating content for day ${i}:`, error);
      // Continuar con el siguiente d√≠a
    }
  }
  
  return content;
};

export default {
  generateContent,
  generateCalendarContent
};
