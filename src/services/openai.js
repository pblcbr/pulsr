// OpenAI service for personalized content generation
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

/**
 * Generates personalized content using OpenAI based on user profile
 * @param {Object} profile - User profile with analyzed personality
 * @param {Object} pillar - Specific content pillar
 * @param {Date} scheduledDate - Scheduled date for content
 * @returns {Promise<Object>} Generated content
 */
export const generateContent = async (profile, pillar, scheduledDate) => {
  try {
    const prompt = buildContentPrompt(profile, pillar, scheduledDate);
    
    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: 'You are an expert in content marketing and social media post generation. You generate personalized content based on the user\'s personality profile.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 500,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const generatedContent = data.choices[0].message.content;
    
    return parseGeneratedContent(generatedContent, profile, pillar, scheduledDate);
  } catch (error) {
    console.error('Error generating content:', error);
    // Fallback to mock content if the API fails
    return generateFallbackContent(profile, pillar, scheduledDate);
  }
};

/**
 * Builds the prompt for OpenAI based on the user profile
 */
const buildContentPrompt = (profile, pillar, scheduledDate) => {
  const { personalityType, tone, interests, contentStrategy, positioning_statement } = profile;
  const dayOfWeek = scheduledDate.toLocaleDateString('es-ES', { weekday: 'long' });
  const month = scheduledDate.toLocaleDateString('en-US', { month: 'long' });
  
  return `
Generate a Twitter post based on the following user profile:

**Personality Profile:**
- Type: ${personalityType}
- Tone: ${tone}
- Interests: ${interests.join(', ')}
- Strategy: ${contentStrategy.focus}
- Positioning Statement: ${positioning_statement || 'Not specified'}

**Content Pillar:**
- Name: ${pillar.name}
- Description: ${pillar.description}

**Context:**
- Date: ${dayOfWeek}, ${month}
- Platform: Twitter
- Format: Twitter thread (maximum 4 tweets)

**Requirements:**
1. Content must be authentic and personal
2. Use the specified tone: ${tone}
3. Include data, statistics or insights when appropriate
4. End with a question that invites interaction
5. Use relevant hashtags (maximum 3)
6. Maintain focus on: ${contentStrategy.focus}

**Response format:**
{
  "title": "Post title",
  "body_md": "Content in Markdown format",
  "summary": "Content summary",
  "keywords": "keywords separated by commas",
  "hashtags": ["#hashtag1", "#hashtag2", "#hashtag3"]
}

Generate content that is valuable, authentic and reflects the ${personalityType} personality of the user.
`;
};

/**
 * Parses the content generated by OpenAI
 */
const parseGeneratedContent = (generatedContent, profile, pillar, scheduledDate) => {
  try {
    // Try to parse as JSON
    const content = JSON.parse(generatedContent);
    
    return {
      title: content.title || `Post sobre ${pillar.name}`,
      body_md: content.body_md || generatedContent,
      summary: content.summary || `Contenido sobre ${pillar.name}`,
      keywords: content.keywords || pillar.name.toLowerCase(),
      hashtags: content.hashtags || [`#${pillar.name.toLowerCase().replace(/\s+/g, '')}`],
      status: 'draft',
      scheduled_at: scheduledDate.toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
  } catch (error) {
    console.warn('Failed to parse AI response as JSON. Falling back to raw content.', error);
    // If not valid JSON, use content as is
    return {
      title: `Post about ${pillar.name}`,
      body_md: generatedContent,
      summary: `Generated content about ${pillar.name}`,
      keywords: pillar.name.toLowerCase(),
      hashtags: [`#${pillar.name.toLowerCase().replace(/\s+/g, '')}`],
      status: 'draft',
      scheduled_at: scheduledDate.toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
  }
};

/**
 * Generates fallback content if the OpenAI API fails
 */
const generateFallbackContent = (profile, pillar, scheduledDate) => {
  const { personalityType, interests } = profile;
  const templates = getFallbackTemplates(personalityType);
  const template = templates[Math.floor(Math.random() * templates.length)];
  const topic = interests[Math.floor(Math.random() * interests.length)];
  
  const content = template.replace('{topic}', topic).replace('{pillar}', pillar.name);
  
  return {
    title: `Post sobre ${pillar.name}`,
    body_md: content,
    summary: `Contenido sobre ${pillar.name}`,
    keywords: `${pillar.name.toLowerCase()}, ${topic}`,
    hashtags: [`#${pillar.name.toLowerCase().replace(/\s+/g, '')}`, `#${topic.replace(/\s+/g, '')}`],
    status: 'draft',
    scheduled_at: scheduledDate.toISOString(),
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
};

/**
 * Fallback templates by personality type
 */
const getFallbackTemplates = (personalityType) => {
  const templates = {
    'analytical': [
      "The data about {topic} that surprised me most:\n\n1. [Data point 1]\n2. [Data point 2]\n3. [Data point 3]\n\nWhich one seems most interesting to you?",
      "Analysis of {topic}: what I learned after studying [X] cases\n\n[Main insight]\n\nHave you observed this too?",
      "My framework for analyzing {topic}:\n\nüìä [Step 1]\nüìà [Step 2]\nüìã [Step 3]\n\nWhat would you add?",
      "The most common error in {topic} according to data:\n\n‚ùå [Common error]\n‚úÖ [Solution]\n\nHave you made this mistake?"
    ],
    'entrepreneurial': [
      "The most important lesson I learned about {topic}:\n\n[Main lesson]\n\nWhat has been your experience?",
      "3 {topic} strategies that work:\n\n1. [Strategy 1]\n2. [Strategy 2]\n3. [Strategy 3]\n\nWhich would you try?",
      "My experience with {topic} in startups:\n\n[Personal experience]\n\nWhat have you learned?",
      "The framework I use for {topic}:\n\n[Framework]\n\nHow would you do it?"
    ],
    'creative': [
      "My creative process for {topic}:\n\nüé® [Step 1]\nüí° [Step 2]\n‚ú® [Step 3]\n\nWhat's your process?",
      "The inspiration behind {topic}:\n\n[Source of inspiration]\n\nWhat inspires you?",
      "3 creative ways to approach {topic}:\n\n1. [Approach 1]\n2. [Approach 2]\n3. [Approach 3]\n\nWhich do you like most?",
      "The creative side of {topic}:\n\n[Creative perspective]\n\nHow do you see it?"
    ],
    'practical': [
      "How to do {topic} step by step:\n\n1. [Step 1]\n2. [Step 2]\n3. [Step 3]\n\nDoes it work for you?",
      "The tool that revolutionized my {topic}:\n\n[Tool]\n\nWhich one do you use?",
      "3 practical tips for {topic}:\n\nüí° [Tip 1]\nüîß [Tip 2]\n‚ö° [Tip 3]\n\nWhich would you add?",
      "My solution for {topic}:\n\n[Solution]\n\nHow do you solve it?"
    ],
    'social': [
      "The conversation that changed my perspective on {topic}:\n\n[Conversation]\n\nWhat conversation marked you?",
      "What I learned from the community about {topic}:\n\n[Learning]\n\nWhat have you learned?",
      "My experience collaborating on {topic}:\n\n[Experience]\n\nHave you collaborated on something similar?",
      "The power of community in {topic}:\n\n[Reflection]\n\nWhat do you think?"
    ],
    'organized': [
      "My system for {topic}:\n\nüìã [System]\n\nHow do you organize it?",
      "The framework I use for {topic}:\n\n[Framework]\n\nWhat framework do you use?",
      "3 steps to organize {topic}:\n\n1. [Step 1]\n2. [Step 2]\n3. [Step 3]\n\nDoes it work for you?",
      "The methodology that revolutionized my {topic}:\n\n[Methodology]\n\nWhich one do you use?"
    ]
  };

  return templates[personalityType] || templates['analytical'];
};

/**
 * Generates multiple posts for a calendar
 */

export default {
  generateContent
};
